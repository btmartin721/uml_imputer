Metadata-Version: 2.1
Name: uml-imputer
Version: 0.0.1
Summary: Python machine learning API to impute missing SNPs
Home-page: https://github.com/btmartin721/uml_imputer
Author: Bradley T. Martin and Tyler K. Chafin
Author-email: evobio721@gmail.com
Maintainer: Bradley T. Martin
Maintainer-email: evobio721@gmail.com
License: GNU General Public License v3 (GPLv3)
Project-URL: Bug Tracker, https://github.com/btmartin721/uml_imputer/issues
Keywords: python,api,impute,imputation,imputer,machine learning,deep learning,neural network,unsupervised,ubp,autoencoder,nlpca
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Operating System :: OS Independent
Classifier: Natural Language :: English
Requires-Python: >=3.8.0,<3.9
Description-Content-Type: text/markdown
Provides-Extra: intel
Provides-Extra: dev
Provides-Extra: arm
License-File: LICENSE


# UML Imputer

Population Genomic Supervised and Unsupervised Imputation

## About UML Imputer

UML Imputer is a Python 3 API that uses unsupervised deep learning models to impute missing values from population genomic SNP data. There are several algorithms available to impute missing data.

### Deep Learning Models

Deep learning imputers include three custom neural network models:

    + Autoencoder [[1]](#1)
    + Non-linear Principal Component Analysis (NLPCA) [[2]](#2)
    + Unsupervised Backpropagation (UBP) [[3]](#3)

Autoencoder models train themselves to reconstruct their input (i.e., the SNP genotypes. To use Autoencoder for imputation, the missing values are masked and the model gets trained to reconstruct only on known values where missing data has been simulated. Once the model is trained, it is then used to predict the missing values.

NLPCA initializes randomly-generated reduced-dimensional (i.e., embedded) input, then trains itself by using known values (i.e., genotypes) as targets. The random input then gets refined during training over multiple cycles. The trained model can then predict the missing values.

UBP is an extension of NLPCA that runs over three phases. Phase 1 refines the randomly generated, reduced-dimensional input in a single layer perceptron neural network to obtain decent initial input values. Phase 2 uses the refined reduced-dimensional input from phase 1 as input into a multi-layer perceptron (MLP), but in Phase 2 only the neural network weights are refined and not the randomly generated input. Phase 3 uses an MLP to refine both the weights and the embedded input. Once the model is trained, it then predicts the missing values.

## Dependencies

+ python == 3.8
+ pandas == 1.2.5
+ numpy == 1.20.2
+ scipy == 1.6.2
+ scikit-learn == 1.0
+ matplotlib
+ seaborn
+ plotly
+ python-kaleido
+ jupyterlab
+ tqdm
+ toytree
+ tensorflow == 2.7
+ keras
+ scikeras >= 0.6.0

### Installation

The requirements can be installed with conda and pip. sklearn-genetic-opt and scikeras are only avaiable via pip, and scikeras requires tensorflow >= 2.7 and scikit-learn >= 1.0. Since tensorflow 2.7 is not yet available on conda channels, you must install it with pip here.

```
conda create -n uml_imputer python=3.8
conda activate ump_imputer

conda install matplotlib seaborn jupyterlab scikit-learn=1.0 tqdm pandas=1.2.5 numpy=1.20.2 scipy=1.6.2

# Only works if using Intel CPUs; speeds up processing
conda install scikit-learn-intelex

conda install -c conda-forge toytree python-kaleido

# For PCA plots.
conda install -c plotly plotly

# For genetic algorithm plotting functions
pip install sklearn-genetic-opt[all]

pip install scikeras

pip install tensorflow-cpu==2.7
```

#### Installation troubleshooting

##### "use_2to3 is invalid" error

Users running setuptools v58 may encounter this error during the last step of installation, using pip to install sklearn-genetic-opt:

```
ERROR: Command errored out with exit status 1:
   command: /Users/tyler/miniforge3/envs/uml_imputer/bin/python3.8 -c 'import io, os, sys, setuptools, tokenize; sys.argv[0] = '"'"'/private/var/folders/6x/t6g4kn711z5cxmc2_tvq0mlw0000gn/T/pip-install-6y5g_mhs/deap_1d32f65d60a44056bd7031f3aad44571/setup.py'"'"'; __file__='"'"'/private/var/folders/6x/t6g4kn711z5cxmc2_tvq0mlw0000gn/T/pip-install-6y5g_mhs/deap_1d32f65d60a44056bd7031f3aad44571/setup.py'"'"';f = getattr(tokenize, '"'"'open'"'"', open)(__file__) if os.path.exists(__file__) else io.StringIO('"'"'from setuptools import setup; setup()'"'"');code = f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' egg_info --egg-base /private/var/folders/6x/t6g4kn711z5cxmc2_tvq0mlw0000gn/T/pip-pip-egg-info-7hg3hcq2
       cwd: /private/var/folders/6x/t6g4kn711z5cxmc2_tvq0mlw0000gn/T/pip-install-6y5g_mhs/deap_1d32f65d60a44056bd7031f3aad44571/
  Complete output (1 lines):
  error in deap setup command: use_2to3 is invalid.
```

This occurs during the installation of DEAP, one of the dependencies for sklearn-genetic-opt. As a workaround, first downgrade setuptools, and then proceed with the installation as normal:
```
pip install setuptools==57
pip install sklearn-genetic-opt[all]

```

##### Mac ARM architecture

uml_imputer has been tested on the new Mac M1 chips and is working fine, but some changes to the installation process were necessary as of 9-December-21. Installation was successful using the following:

```
### Install Miniforge3 instead of Miniconda3
### Download: https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-arm64.sh
bash ~/Downloads/Miniforge3-MacOSX-arm64.sh

#close and re-open terminal

#create and activate conda environment
conda create -n uml_imputer python

#activate environment
conda activate uml_imputer

#install packages
conda install -c conda-forge matplotlib seaborn jupyterlab scikit-learn==1.0 tqdm pandas=1.2.5 numpy=1.20.2 scipy=1.6.2 toytree

conda install -c conda-forge toytree python-kaleido

# For PCA plots.
conda install -c plotly plotly

#downgrade setuptools (may or may not be necessary)
pip install setuptools==57

#install sklearn-genetic-opt and mlflow
pip install sklearn-genetic-opt[all] mlflow

pip install scikeras

pip install tensorflow==2.7
```

Any other problems we run into testing on the Mac ARM architecture will be adjusted here. Note that the step installing scikit-learn-intelex was skipped here. uml_imputer will automatically detect the CPU architecture you are running, and forgo importing this package (which will only work on Intel processors)

## Input Data

Takes a STRUCTURE or PHYLIP file and a population map (popmap) file as input.  
There are a number of options for the structure file format. See the help menu:

```python run_uml.py -h``` 

You can read your input files like this:

```
# Read in PHYLIP or STRUCTURE-formatted file
data = GenotypeData(...)
```

The data can be retrieved as a pandas DataFrame, a 2D numpy array, or a 2D list, each with shape (n_samples, n_SNPs):

```
df = data.genotypes012_df
arr = data.genotypes012_array
l = data.genotypes012_list
```

You can also retrieve the number of individuals and SNP sites:

```
num_inds = data.indcount
num_snps = data.snpcount
```

And to retrieve a list of sample IDs or population IDs:

```
inds = data.individuals
pops = data.populations
```

## Supported Imputation Methods

There are numerous supported algorithms to impute missing data. Each one can be run by calling the corresponding class.

```
# Three imputation options are supported
ae = ImputeAutoencoder(<options>) # Autoencoder
nlpca = ImputeNLPCA(<options>) # Nonlinear PCA
ubp = ImputeUBP(<options>) # Unsupervised backpropagation
```

## To-Dos

- read_vcf
- simulations
- Documentation

## References:
     <a id="1">[1]</a>D.E. Rumelhart, G.E. Hinton, and R.J. Williams. Learning internal representations by error propagation. In Parallel Distributed Processing. Vol 1: Foundations. MIT Press, Cambridge, MA, 1986.

    <a id="2">[2]</a>Scholz, M., Kaplan, F., Guy, C. L., Kopka, J., & Selbig, J. (2005). Non-linear PCA: a missing data approach. Bioinformatics, 21(20), 3887-3895.
    
    <a id="3">[3]</a>Gashler, M. S., Smith, M. R., Morris, R., & Martinez, T. (2016). Missing value imputation with unsupervised backpropagation. Computational Intelligence, 32(2), 196-215.
